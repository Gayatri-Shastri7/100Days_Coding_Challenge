
Deletion in Linked Lists
Given a linked list, we want to delete an element in a linked list.

Deleting an element in linked list can have three cases:

Deleting an element from the beginning of the linked list.
Deleting an element from the end of the linked list.
Deleting a certain element from the linked list.
Deleting an element from the beginning of the linked list
The first node of the linked list is deleted and the second node becomes the new head of the linked list.

What if the linked list is empty?
There is no node to delete in this case.

Our code logic looks like:

Point temp pointer to current head.
Move the head pointer to the next node.
Delete temp node,
Return new head of the linked list.
Example

Suppose we want to remove 20 from following linked list:

Linked List

Point temp pointer to current head.

Linked List

Move head to next node

Linked List

Delete temp node

Linked List

Final Linked List looks like:

Linked List

Function to delete an element from beginning of Linked List
def DeleteFromBeggining(head): 
    if (head == NULL): 
       return NULL
  
    # Point temp to head
    temp = head 
    
    # Move the head pointer to the next node and delete first node
    head = head.next     
    
  
    # Return new head of the linked list
    return head  
Node* DeleteFromBeggining(Node* head) 
{ 
    if (head == NULL) 
       return NULL; 
  
    // Point temp to head
    Node *temp = head; 
    
    // Move the head pointer to the next node and delete first node
    head = head->next;     
    delete temp; 
  
    // Return new head of the linked list
    return head;  
} 
Deleting an element from the end of the linked list
The last node of the linked list is deleted in this case.

What if there is only one node in the linked list?
The linked list becomes empty and NULL is returned.

Our code logic looks like:

Create two pointers temp and prev_node.
Point both the pointers to head.
Traverse to the last node of the linked list with prev_node pointing to second last node.
If there is only one node in the linked list, point head to null.
Else, make next of prev_node to point to null.
Delete temp in the end.
Example

Suppose we want to delete last node from the following linked list:

Linked List

Create two pointers temp and prev_node. and point both the pointers to head

Linked List

Traverse to the last node of the linked list with prev_node pointing to second last node.

Linked List

Make next of prev_node to point to null.

Linked List

Delete temp in the end.

Linked List

Final linked list looks like:

Linked List

Function to delete last element of Linked List
def DeleteFromLast(head): 
    
    if(head == NULL):
        return NULL
    
    temp = head
    prev_node = head
 
    # Traverse to the last node of the linked list
    while(temp.next != NULL):
        prev_node = temp
        temp = temp.next
 
    # If there is only one node in linked list
    if(temp == head):
        head = NULL
        
    # Make next of prev_node to point to null
    else:
        prev_node.next = NULL
   
Node* DeleteFromLast(Node* head) 
{ 
    Node *temp, *prev_node;
 
    if(head == NULL)
    {
        return NULL;
    }
    
    temp = head;
    prev_node = head;
 
    // Traverse to the last node of the linked list
    while(temp->next != NULL)
    {
        prev_node = temp;
        temp = temp->next;
    }
 
    // If there is only one node in linked list
    if(temp == head)
    {
        head = NULL;
    }
    // Make next of prev_node to point to null
    else
    {
        prev_node->next = NULL;
    }
 
    // Delete last node
    free(temp);
} 
Deleting a certain element from the linked list
Given an element, delete the first occurrence of this element from the linked list.

If the element is the first element of the linked list, we follow the logic of deleting first element from the linked list.

If the element is last element of the linked list, we follow the logic of deleting last element from the linked list.

If the element is not present in the linked list, we can’t delete the element.

Our code logic looks like:

Maintain two pointers temp and prev. Point temp to head.
If the node to be deleted is first node, delete first node.
Search for the element to be deleted, and maintain prev_node of the node to be to be deleted.
If the linked list doesn’t contain element return.
Change next pointer of previous node to point to next of the node to be deleted.
Free memory of the node to be deleted.
Example

Suppose we want to delete element 40 from following linked list:

Linked List

Maintain two pointers temp and prev. Point temp to head.

Linked List

Search for the element to be deleted, and maintain prev_node of the node to be to be deleted.

Linked List

Change next pointer of previous node to point to next of the node to be deleted.

Linked List

Free memory of the node to be deleted.

Linked List

Final linked list looks like:

Linked List

Function for Deleting a certain element from the linked list
def DeleteElement(head, data):
    
    # Store head node 
    temp = head 
  
    # If the node to be deleted is first node.
    if (temp != NULL && temp.data == key):
        head = temp.next   
        return 
  
    # Search for the element to be deleted, and maintain prev_node of the node 
    # to be deleted.
    while (temp != NULL && temp.data != key):
        prev = temp
        temp = temp.next
  
    # If linked list doesnt contain the key
    if (temp == NULL): 
        return
  
    # Change next of prev_node to point to next of the node to be deleted. 
    prev.next = temp.next      
void DeleteElement(Node** head, int data) 
{ 
    // Store head node 
    Node* temp = *head;
    Node* prev; 
  
    // If the node to be deleted is first node.
    if (temp != NULL && temp->data == key) 
    { 
        *head = temp->next;   
        free(temp);
        return; 
    } 
  
    // Search for the element to be deleted, and maintain prev_node of the node 
    // to be deleted.
    while (temp != NULL && temp->data != key) 
    { 
        prev = temp; 
        temp = temp->next; 
    } 
  
    // If linked list doesnt contain the key
    if (temp == NULL) 
        return; 
  
    // Change next of prev_node to point to next of the node to be deleted. 
    prev->next = temp->next; 
  
    // Free memory for the node to be deleted
    free(temp);
} 
Comparison of Time Complexities of Deletion in different cases
Case	Time Complexity
At Beginning	O(1)
At the end	O(n)
A certain element	O(n) - Worst Case, O(1) - Best Case
For a more visual representation, make sure to check the animation for deletion in a linked list
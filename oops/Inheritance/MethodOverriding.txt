
Method Overriding in Python
Method Overriding
We have earlier seen how inheritance allows us to define certain properties that are common to all requirements. We then define a subclass for specific cases.

Well, another such feature is method overriding. It allows us to define a particular way of doing something through a method. However, if any subclass feels that it needs a different implementation of that method, then it can define it’s own method.

For example, in the example of Player, Warrior and Elf, we want all the objects to have a run() method.

However, we want our elves to run faster. The run() method needs to be there, but the implementation has to be different.

In such scenarios we use method overriding.

Method overriding happens in inheritance, when a child class shares the same definition as the parent class. At runtime, Python chooses to execute the child class’s method and not the parent class’s method. In this way, the child class’s object overrides the parent class. Thus, method overriding.

Example
class Player:
    def __init__(self):
        self.lives = 5
        self.speed = 0
        self.stamina = 10
    def run(self):
        self.speed = self.speed + 5
 
class Elf(Player):
    def __init__(self):
        super().__init__() # initializing all values of parent class
        self.magic = 50
    def run(self): # overriding the previously defined run method
        self.speed = self.speed + 10
 
 
class Warrior(Player):
    def __init__(self):
        super().__init__() # initializing all values of parent class
        self.strength = 100
Here, the run() method in Elf has overridden the superclass Player method of run(). You can see it in action here:

warrior_1 = Warrior(); # new Warrior object created
elf_1 = Elf(); # new Elf object created
 
 
warrior_1.speed = 10; # Speed of Warrior object
warrior_1.run()
print(f"Warrior Speed: {warrior_1.speed}");
print(f"Running, Warrior Speed: {warrior_1.speed}"); # Speed of Elf Object
 
 
elf_1.speed = 10;
elf_1.run()
print(f'Elf Speed: {elf_1.speed}')
print(f'Running, Elf Speed: {elf_1.speed}')
Output:

Warrior Speed: 15
Running, Warrior Speed: 15
Elf Speed: 20
Running, Elf Speed: 20
https://blockly.netlify.com/static/warrior_running.gif
https://blockly.netlify.com/static/elf_running.gif
https://blockly.netlify.com/static/class_diagram_2.png
As you can see, each the Elf subclass has its own definition of run and not the same definition as the Player class. However, Warrior uses the same definition as the Player class.

As you design more complex solutions, you can use the method overriding feature where necessary.

Check out some example to understand this concept better!

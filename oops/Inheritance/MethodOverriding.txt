
10
Chat (48 Online)
Search for coders
Mariyala Harika
Satyanarayana Uppada
Keshav S
JASWANTHIKA S
VIGNESH SEKAR
Meet Vaddoriya
Charishma Seera
Ishika L
Dulam Sree Siva Gayathree Devi
SUGGU PAVAN
Sai Sushank Mantri Pramod
kavya katkam
Sasidhar Talluri
ROHIT SAI PICHIKA
Praneeth Bonagiri
Mohammed Niha Tahoor
Vilas chary sriramoji
Garrepelli Laxmi Pranavi
pragyna karunakaram
svs sindhu
Ruturaj Thakur
Thriveni Thota
Chidrapu Shreshta
Bindhu123 Bindhu123
Usha Nookala
Hoyasala kannemadugu
Bhavana Marpadaga
Koti Amulya
Melam Saikiran
V Janaki Pratyusha TENNETI
Varthya Aarthi
Sharmila Undru
RUTHIKA ARAVA
Praneetha Sangirala
Vaishnavi Pandey
Manaswini Kyama
Abhigna Nadupalli
Teja botta
Lalana Palwaye
Priyanka Patil
Radha Kalyani NAKKA
Sri Sai Kamal Asari
Kiranmayee Peddinti
MOUNIKA PEDDI
Shivani Reddy
Anudeep Dhavaleswarapu
Prathmesh Raut
Sravani Kaligotla
_deep_ _b_
shivam keshri
manasa poluru
Rutika Pasalkar
221810303050 SISTLA SAI SREYAS
madhulika Erukulla
Manthina Sriram Varma
balu balaji
Pradnya Digole
Bondili Jaya Naga Keerthi Singh
PUNNA SURYA
Yash Varshney
33 min ago
KANURI MAHESH
Gowtham Sai
Neelam Vinay
Haritha Rathamsetty
Krishnam Naidu S
18131A0597 MACHARLA RAMA SAHITHI
sanskruti patil
M SAHARSH REDDY
Koppisetti Sai Bhavya
Alankruthi Saieni
3 hrs ago
Srinivas Sriramdas
Demo Account
Sri Charita KUSAMPUDI
Preshitha Puppala
Manaswini Akula
Harini Induri
Vamshi Raj
GAYATRI GOTTUMUKKALA
San Sherla
Iam Uday
Sreya _Ravi
madhuri aradwad
Poojitha Ravuri
3 hrs ago
Aditya Patil
2 days ago
Vinay Kumar
6 months ago
Abhinandan Panigrahi
16 days ago
Vijay Rohit
2 hrs ago
Aravind Barri
3 days ago
Sulagna Dutta
6 hrs ago
Aparna Daripalli
2 months ago
G Dharani
6 days ago
NAGA SAISRIYA CHAKRAVARTHI
6 days ago
Akhila Mailaram
6 days ago
Raghavendrarises@gmail.com Raghava
17 hrs ago
Bhavani Nimmala
2 days ago
Sowmya Sree Anupati
4 days ago
Jayanthi Gaddala
2 days ago
pavani basa
1 month ago
Venky Reddy
3 days ago
Megana Goud
4 days ago
Object Oriented Programming
25
Rank
All topics
Estimated End Date: 01/03/21
Method Overriding in Python
Method Overriding
We have earlier seen how inheritance allows us to define certain properties that are common to all requirements. We then define a subclass for specific cases.

Well, another such feature is method overriding. It allows us to define a particular way of doing something through a method. However, if any subclass feels that it needs a different implementation of that method, then it can define it’s own method.

For example, in the example of Player, Warrior and Elf, we want all the objects to have a run() method.

However, we want our elves to run faster. The run() method needs to be there, but the implementation has to be different.

In such scenarios we use method overriding.

Method overriding happens in inheritance, when a child class shares the same definition as the parent class. At runtime, Python chooses to execute the child class’s method and not the parent class’s method. In this way, the child class’s object overrides the parent class. Thus, method overriding.

Example
class Player:
    def __init__(self):
        self.lives = 5
        self.speed = 0
        self.stamina = 10
    def run(self):
        self.speed = self.speed + 5
 
class Elf(Player):
    def __init__(self):
        super().__init__() # initializing all values of parent class
        self.magic = 50
    def run(self): # overriding the previously defined run method
        self.speed = self.speed + 10
 
 
class Warrior(Player):
    def __init__(self):
        super().__init__() # initializing all values of parent class
        self.strength = 100
Here, the run() method in Elf has overridden the superclass Player method of run(). You can see it in action here:

warrior_1 = Warrior(); # new Warrior object created
elf_1 = Elf(); # new Elf object created
 
 
warrior_1.speed = 10; # Speed of Warrior object
warrior_1.run()
print(f"Warrior Speed: {warrior_1.speed}");
print(f"Running, Warrior Speed: {warrior_1.speed}"); # Speed of Elf Object
 
 
elf_1.speed = 10;
elf_1.run()
print(f'Elf Speed: {elf_1.speed}')
print(f'Running, Elf Speed: {elf_1.speed}')
Output:

Warrior Speed: 15
Running, Warrior Speed: 15
Elf Speed: 20
Running, Elf Speed: 20
https://blockly.netlify.com/static/warrior_running.gif
https://blockly.netlify.com/static/elf_running.gif
https://blockly.netlify.com/static/class_diagram_2.png
As you can see, each the Elf subclass has its own definition of run and not the same definition as the Player class. However, Warrior uses the same definition as the Player class.

As you design more complex solutions, you can use the method overriding feature where necessary.

Check out some example to understand this concept better!
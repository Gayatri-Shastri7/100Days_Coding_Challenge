
Methods & Functions in Python are very powerful. We have seen in the earlier chapters how we defined a method to do all kinds of things: generating patterns, series, searching and sorting.

All the time that we have used methods, we have accepted the parameter from the user.

However, sometimes we come need parameters in a method that already have a certain default value. In this case we use default values for parameters.

We can use default methods for all methods, they need not always be inside a class.

Let's look at an example. Let's say we want to print the factorial of a number using a method, such that, if no number is given, we will always print 4 factorial.

This is how the code would be written:

def factorial(num = 4):
    fact = 1
    for i in range(1,num+1):
    	fact = fact * i
    print(fact)
 
factorial() # prints 4! because it takes the default parameter
factorial(5) # prints 5!
factorial(num = 6) # prints 6!
In the above code, we have given the default value of 4. Without any arguments, the output is 4!
With the argument as 5, it prints 5!
We can also use the argument names to declare the values, as we have done in the last method call
We can also have a combination of non-default and default arguments. We have to be careful to ensure that, in the method signature the default arguments appear after the non-default arguments

For example, let's say we want to print the name of a person n number of times. IF value of n is not provided, we assume it to be 3.  Let us see how to define that:

class Repeater:
    def sayName(firstName, lastName, times = 3):
        full_name = firstName + ' ' + lastName + ' '
        print(full_name*times)
 
Repeater.sayName('Edyst', 'Python')
Repeater.sayName('Virat', 'Kohli', 5)
Output:

Edyst Python Edyst Python Edyst Python 
Virat Kohli Virat Kohli Virat Kohli Virat Kohli Virat Kohli
In the first call, we did not give any value to times, so it repeated for 3 times exactly
In the second call, we passed 5 as a parameter and it repeated 5 times
Another way to call methods is:

class Repeater:
    def sayName(firstName, lastName, times = 3):
        full_name = firstName + ' ' + lastName + ' '
        print(full_name*times)
 
Repeater.sayName(lastName="Doe", times=4, firstName="John")
Output:

John Doe John Doe John Doe John Doe 
Here, we called each argument by their names - so the ordering didn't matter.

In object methods
We can apply the same property to object methods.

class Boy:
    def __init__(self, name, clothes = "Summer"):
        self.name = name
        self.clothes = clothes
    def printProps(self):
        print(f'My name is {self.name} and clothes are {self.clothes}')
 
boy1 = Boy("Alex") # created first boy object
boy2 = Boy("Jimmy", "Winter") # created another boy object
 
boy1.printProps()
boy2.printProps()
 
Here, by default we have given the clothes to have value Summer unless specified otherwise.

Try out a few examples yourself!

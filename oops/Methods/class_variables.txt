
Class Variables
Let's go back to our example of the game characters.

We will have certain cases where we want all our objects to have a certain value that is shared. For example, the maximum health of a Boy character in level 1 could be 100 but from level 2, it might be 200.

As the game progresses to level 2, we would want all the objects to have a max_health increased to 200.

In cases where we want values to be shared across all the objects, we use class variables

Example

class Boy:
    max_health = 100
 
    def __init__(self, name, clothes):
        self.name = name
        self.clothes = clothes
 
    def say_hello(self):
        print("Hi, my name is", self.name)
        print("I am wearing", self.clothes, "clothes")
 
boy1 = Boy("Alex", "Summer")
boy1.say_hello()
 
boy2 = Boy("Jimmy", "Winter")
boy2.say_hello()
 
print("Boy1's max health is", boy1.max_health)
print("Boy2's max health is", boy2.max_health)
 
print('--Entering Level 2--')# after entering Level 2
Boy.max_health = 200
 
print("Boy1's max health is", boy1.max_health)
print("Boy2's max health is", boy2.max_health)
Output

Hi, my name is Alex
I am wearing Summer clothes
Hi, my name is Jimmy
I am wearing Winter clothes
Boy1's max health is 100
Boy2's max health is 100
--Entering Level 2--
Boy1's max health is 200
Boy2's max health is 200
Notice how the max_health is not a part of the __init__ method? That's because it's not part of the object. Rather, it is part of the class as a while
Changing the class variable once, changes it for all the other objects of the Boy class
An important exception
One thing to note here is that, when assigning the value to a class variable, always use the class's reference. If you use the object's reference, you will end up assigning a new variable to the object and bypass the class variable.

What does that mean? Let's look at an example:

class Boy:
    max_health = 100
 
    def __init__(self, name, clothes):
        self.name = name
        self.clothes = clothes
 
    def say_hello(self):
        print("Hi, my name is", self.name)
        print("I am wearing", self.clothes, "clothes")
 
boy1 = Boy("Alex", "Summer")
boy1.say_hello()
 
boy2 = Boy("Jimmy", "Winter")
boy2.say_hello()
 
print("Boy1's max health is", boy1.max_health)
print("Boy2's max health is", boy2.max_health)
 
print('--Entering Level 2--') # after entering Level 2
boy1.max_health = 200
 
print("Boy1's max health is", boy1.max_health) # now, refers to the Boy1's instance variable
print("Boy2's max health is", boy2.max_health) # still refers to Boy class variable
 
Boy.max_health = 300
 
print("Boy1's max health is", boy1.max_health) # still refers to boy1's instance variable
print("Boy2's max health is", boy2.max_health) # still refers to Boy class variable
Output:

Hi, my name is Alex
I am wearing Summer clothes
Hi, my name is Jimmy
I am wearing Winter clothes
Boy1's max health is 100
Boy2's max health is 100
--Entering Level 2--
Boy1's max health is 200
Boy2's max health is 100
Boy1's max health is 200
Boy2's max health is 300
In the case where the object has a variable with the same name as a class variable, python prioritizes the instance variable
This is an important point and you are sure to be asked this in interview questions.

Go ahead and try out a few examples!

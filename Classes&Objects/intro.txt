
Chat (44 Online)
Search for coders
JASWANTHIKA S
Divya Pathak
Manthina Sriram Varma
Gorantala Sai
Varthya Aarthi
yashwanth reddy
svs sindhu
Sravani Vedala
pragyna karunakaram
Gopidesi Rohini
M Neehar
shivam keshri
Koti Amulya
SWARNA SAVITRI KAMISETTI
Likhitha Arwapally
Reshma Kayala
Srujan Jilla
Harshitha Nandam
Sreemanth B
Yaseen Malik Qureshi Mohammed
Paluru Nikhita
Teja Chalumuri
Javadala Harsha vardhan
Garrepelli Laxmi Pranavi
Saraf Rohith
Chavva Kiranmai
Meet Vaddoriya
GAYATRI GOTTUMUKKALA
abhishek sharma
Sunil Madhukar
Anusha Bellamkonda
lekhana chowdary
Srija Dhulipalla
19505A0238 vullamgunta giri kumar
K Sai Sreelekha
Susmitha Mudigiri
121810318015 MADALA VENKATA SANJAY
18131A0592 LAKKIMSETTI ANUPAM
Shradha Warake
Pavani Vadali
Karthik Chittimalla
CvRahul Reddy
Shubham Patil
courses all
Pranjal Agarwal
balu balaji
Sameena Shaik
Challa Ravikishore
18501A0278 sunkara vaishnavi
manasa poluru
Aishwarya Dhande
madhulika Erukulla
BinduMadhuri Tetali
KANURI MAHESH
V PAVITRA
Bondili Jaya Naga Keerthi Singh
MAHITHA TENNETI
MOHAN kumar p
shriya sripada
Ravi markapudi
Abhinaya Kondam
Tulika Mundra
potukuchi ajita
Radha Kalyani NAKKA
MANCHIKANTI PRANEETHA
P A S Pavani
Naveen p
puneeth TITAN
Dharmendra Katta
Siddartha Eddu
MRINAL MADHUBRATA
N Chandra Kumari
Gopinath Ramalingam
hrushikesh reddy
Charitha Nagapuri
kavya katkam
Bindhu123 Bindhu123
Aniketh Jindal
Sayyam Tamboli
kiran sai
Sreya _Ravi
Sai Venkata Meghana Galidevara
Basani Harshavardhan Reddy
sumera shaikh
Sahithi Kethepalli
bharat 007
Tejaswi Pitchuka
Prathmesh Raut
Uday Kiran
A Shiva
Sai Srujan
Pruthviraj Bhosale
Hoyasala kannemadugu
Pravardh Kumar
Sai Sushank Mantri Pramod
Vipul Kargaonkar
18131A04A3 KORLA SAI SIREESHA
Chidrapu Shreshta
18R21A0563 pavan
Aditya Patil
24 hrs ago
Object Oriented Programming
25
Rank
All topics
Estimated End Date: 01/03/21
[Python] Intro to OOP: classes & objects
Throughout this module, we will explore the central theme of a game. We will try to create a game which includes the following characters:

A Boy
A Warrior
An Elf
An Archer
A Knight
The Police
We have all played games before. Now, we will look at how programmers actually think about organizing the different characters of this game.

Classes
Looking at our different game characters, we realize the each one of them has some unique characteristics

The Police has guns. They can also walk and lie down
The Warrior and Elf have different weapons
The Boy has no weapons, but he does have option of different clothes.
The Boy, Warrior and Elf can run
The Warrior, Elf and Police can attack. The Boy cannot
Looking at the above, we can say that each character has different properties. These properties could be with regards to state or with regards to behavior. For eg,

The Boy can have the states: winter clothes, summer clothes etc.
The Warrior can have different behaviors like: run and attack
State and behavior are the 2 main starting blocks of OOP or Object Oriented Programming.

One thing is clear though, while a Boy may be different from a Warrior, all Boys will have the same attributes and all Warriors will have the same attributes.

So, to define such common attributes we use a class

A class is a blueprint that defines the variables and the methods common to all objects of a certain kind.
An object is the instance of this blueprint.

Think of it like this:

We begin by defining the plan or blueprint for our game characters
We then create instances or objects from these plans every time we need to create new character. Since all of them follow the same plan, they all will have the same attributes
https://blockly.netlify.com/static/class_1.png
Example: defining the Boy class and the Warrior class
We use the class keyword to define a new class. We also define a method inside the class, called say_hello

class Boy: 
    def say_hello(self):
        print("Hi, I am a boy")
Now, any object of the type Boy will have the method say_hello

But wait! What is this keyword called self? We'll look into self in detail later. But for now, you should know that it is required to be used as a parameter when we are defining methods that will be used by objects.

Without an object, a class really is not that useful. Let us define 2 objects of type Boy

# class definition
 
class Boy:
	def say_hello(self):
        print("Hi, I am a boy")
        
boy1 = Boy() # created first boy object
boy2 = Boy() # created another boy object
 
print("Boy 1:", end = " ")
boy1.say_hello() # calling boy1's hello method
 
print("Boy 2:", end = " ")
boy2.say_hello() # calling boy2's hello method
Output:

Boy 1: Hi, I am a boy
Boy 2: Hi, I am a boy

Let's define another class, Warrior and an object of that class:

class Boy:
    def say_hello(self):
        print("Hi, I am a boy")
 
 
class Warrior:
    def say_hello(self):
        print("Argh! I am a Warrior!")
 
 
boy1 = Boy()
boy2 = Boy()
warrior1 = Warrior() # warrior objects
 
print("Boy 1:", end = " ")
boy1.say_hello()
 
print("Boy 2:", end = " ")
boy2.say_hello()
 
print("Warrior 1:", end = " ")
warrior1.say_hello() # calling warrior1's hello method
Output:

Boy 1: Hi, I am a boy
Boy 2: Hi, I am a boy
Warrior 1: Argh! I am a Warrior!
